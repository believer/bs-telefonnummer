// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Riktnummer = require("./Riktnummer.bs.js");

function clean(phoneNumber) {
  var normalized = phoneNumber.replace("(0)", "").replace(/\D+/gi, "");
  var withPhone = function (from) {
    return "0" + normalized.substr(from);
  };
  var pn = normalized.substring(0, 4);
  if (pn.startsWith("0046")) {
    return withPhone(4);
  } else if (pn.startsWith("460")) {
    return withPhone(3);
  } else if (pn.startsWith("46")) {
    return withPhone(2);
  } else {
    return normalized;
  }
}

var Normalize = {
  clean: clean
};

function make(phoneNumber) {
  return "tel:" + clean(phoneNumber);
}

var Link = {
  make: make
};

function replacer(regex, replaceWithOpt, param, __x) {
  var replaceWith = replaceWithOpt !== undefined ? replaceWithOpt : "$1-$2 $3 $4";
  return __x.replace(regex, replaceWith);
}

var regex = /^08/;

var partial_arg = /^(\d{2})(\d{2})(\d{2})(\d{2})$/;

function sixDigit(param) {
  return replacer(partial_arg, undefined, undefined, param);
}

var partial_arg$1 = /^(\d{2})(\d{3})(\d{2})(\d{2})$/;

function sevenDigit(param) {
  return replacer(partial_arg$1, undefined, undefined, param);
}

var partial_arg$2 = /^(\d{2})(\d{3})(\d{3})(\d{2})$/;

function eightDigit(param) {
  return replacer(partial_arg$2, undefined, undefined, param);
}

var regex$1 = /^0(1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|7[0235-9]|9[09])/;

var partial_arg$3 = "$1-$2 $3";

var partial_arg$4 = /^(\d{3})(\d{3})(\d{2})$/;

function fiveDigit(param) {
  return replacer(partial_arg$4, partial_arg$3, undefined, param);
}

var partial_arg$5 = /^(\d{3})(\d{2})(\d{2})(\d{2})$/;

function sixDigit$1(param) {
  return replacer(partial_arg$5, undefined, undefined, param);
}

var partial_arg$6 = /^(\d{3})(\d{3})(\d{2})(\d{2})$/;

function sevenDigit$1(param) {
  return replacer(partial_arg$6, undefined, undefined, param);
}

var partial_arg$7 = /^(\d{4})(\d{2})(\d{2})(\d{2})$/;

function sixDigit$2(param) {
  return replacer(partial_arg$7, undefined, undefined, param);
}

function digits(value) {
  if (regex.test(value)) {
    return "Two";
  } else if (regex$1.test(value)) {
    return "Three";
  } else {
    return "Four";
  }
}

var phoneNumbers = [
  "888",
  "333",
  "222",
  "147"
];

var valid = /^07(0|2|3|6|9)\d{7}$/;

function findValidByRiktnummer(digits, trailingDigits) {
  var codes = Riktnummer.validRiktnummer.filter(function (param) {
            return param[0].length === digits;
          }).map(function (param) {
          return param[0];
        }).join("|");
  return new RegExp("^(" + codes + ")\\d{5," + String(trailingDigits) + "}$");
}

var validTwoDigit = /^08\d{6,7}$/;

var validThreeDigit = findValidByRiktnummer(3, 7);

var validFourDigit = findValidByRiktnummer(4, 6);

function typeOfNumber(number) {
  if (phoneNumbers.includes(number)) {
    return /* VoiceMail */0;
  } else if (number.normalize().startsWith("07")) {
    return {
            TAG: /* Mobile */0,
            _0: clean(number)
          };
  } else {
    return {
            TAG: /* Landline */1,
            _0: clean(number)
          };
  }
}

function parse(phoneNumber) {
  var pn = typeOfNumber(phoneNumber);
  if (typeof pn === "number") {
    return "Röstbrevlåda";
  } else if (pn.TAG === /* Mobile */0) {
    return Curry._1(sevenDigit$1, pn._0);
  } else {
    var pn$1 = pn._0;
    var match = digits(pn$1);
    var match$1 = pn$1.length;
    var tmp;
    var exit = 0;
    if (match === "Two") {
      switch (match$1) {
        case 8 :
            tmp = sixDigit;
            break;
        case 9 :
            tmp = sevenDigit;
            break;
        case 10 :
            tmp = eightDigit;
            break;
        default:
          exit = 1;
      }
    } else if (match === "Three") {
      switch (match$1) {
        case 8 :
            tmp = fiveDigit;
            break;
        case 9 :
            tmp = sixDigit$1;
            break;
        case 10 :
            tmp = sevenDigit$1;
            break;
        default:
          exit = 1;
      }
    } else if (match === "Four") {
      tmp = sixDigit$2;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      tmp = (function (param) {
          return pn$1;
        });
    }
    return tmp(pn$1);
  }
}

function isValid(phoneNumber) {
  if (/[a-z]/gi.test(phoneNumber)) {
    return false;
  }
  var pn = typeOfNumber(phoneNumber);
  if (typeof pn === "number") {
    return true;
  }
  if (pn.TAG === /* Mobile */0) {
    return valid.test(pn._0);
  }
  var pn$1 = pn._0;
  var digits$1 = digits(pn$1);
  if (digits$1 === "Three") {
    return validThreeDigit.test(pn$1);
  } else if (digits$1 === "Four") {
    return validFourDigit.test(pn$1);
  } else {
    return validTwoDigit.test(pn$1);
  }
}

var Validate = {
  isValid: isValid
};

exports.Validate = Validate;
exports.Normalize = Normalize;
exports.Link = Link;
exports.typeOfNumber = typeOfNumber;
exports.parse = parse;
/* validThreeDigit Not a pure module */
